#!/usr/bin/env bash
#                                                    -*- sh-basic-offset: 2 -*-

# Copyright 2013 YouView TV Ltd.
#           2013-2015 stb-tester.com Ltd.
# License: LGPL v2.1 or (at your option) any later version (see
# https://github.com/stb-tester/stb-tester/blob/master/LICENSE for details).
#
# Input command-line arguments:
#
# * testname [args...]
#
# Input environment variables:
#
# * $do_html_report ("true" or "false")
# * $tag
# * $v
# * $verbose
# * $outputdir
#
# Outputs:
#
# * A test-run directory under $outputdir
# * $outputdir/latest pointing to this directory
#
# IPC:
#
# * SIGTERM signal says stop this test
#


die() { echo "$(basename "$0"): error: $*" >&2; exit 2; }

main() {
  runner=$(dirname "$(realpath "$0")")
  local test testpath tmpdir rundir

  test="$1" && shift &&
  testpath=$(realpath "$test") &&
  test_script_dir=$(dirname "$testpath") &&
  mkdir -p "$outputdir" &&
  pushd "$outputdir" >/dev/null &&
  rundir=$(date +%Y-%m-%d_%H.%M.%S)"$tag" &&
  { mkdir "$rundir" ||
    # Avoid directory name clashes if the previous test took <1s to run
    { sleep 1 && mkdir "$rundir"; }
  } &&
  send_state_change active_results_directory "\"$outputdir/$rundir\"" &&
  rm -f current"$tag" && ln -s "$rundir" current"$tag" &&
  cd "$rundir" &&
  tmpdir="$(mktemp -dt stbt-batch.XXX)" &&
  mkfifo "$tmpdir"/rawout "$tmpdir"/rawerr ||
  die "Failed to set up test-run directory '$outputdir/$rundir'."

  [ -n "$tag" ] && echo "Tag	${tag#-}" > extra-columns

  git -C "$test_script_dir" describe --always --dirty 2>/dev/null \
    > git-commit || rm -f git-commit

  git -C "$test_script_dir" rev-parse HEAD \
    > git-commit-sha || rm -f git-commit-sha

  ( cd "$test_script_dir" &&
    gitdir=$(dirname "$(realpath "$(git rev-parse --git-dir 2>/dev/null)")") &&
    echo "${testpath#$gitdir/}" || echo "$testpath"
  ) > test-name

  printf "%s\n" "$@" > test-args

  if $do_html_report; then
    "$runner"/report --html-only . >/dev/null
  fi

  if [ "$save_video" != "false" ]; then
    save_video_arg="--save-video video.webm"
  fi

  user_command pre_run start

  [ $verbose -gt 0 ] && printf "\n$test $*...\n" || printf "$test $*... "
  "$runner"/../stbt-run $v --save-thumbnail=always $save_video_arg \
    "$testpath" -- "$@" \
    >"$tmpdir"/rawout 2>"$tmpdir"/rawerr &
  stbtpid=$!
  local start_time=$(date +%s)

  exec 3>/dev/null 4>/dev/null
  [ $verbose -gt 0 ] && exec 3>&1
  [ $verbose -gt 1 ] && exec 4>&1

  ts '[%Y-%m-%d %H:%M:%.S %z] ' < "$tmpdir"/rawout | tee stdout.log >&3 &
  ts '[%Y-%m-%d %H:%M:%.S %z] ' < "$tmpdir"/rawerr | tee stderr.log >&4 &

  wait $stbtpid
  exit_status=$?

  [[ $exit_status -eq 0 ]] && echo OK || echo FAILED

  # Data that must be collected ASAP
  echo $(( $(date +%s) - $start_time )) > duration
  which sensors &>/dev/null && sensors &> sensors.log
  echo $exit_status > exit-status

  user_command post_run stop

  rm "$tmpdir"/rawout "$tmpdir"/rawerr
  rmdir "$tmpdir"
  echo "$STBT_VERSION" > stbt-version.log
  grep -q "FAIL: .*: MatchTimeout" stdout.log && template
  [ -f core* ] && backtrace core*
  STBT_TRACING_SOCKET="" "$runner"/report --classify-only . >/dev/null
  grep -q "FAIL: .*: NoVideo" stdout.log && {
    check_capture_hardware || touch unrecoverable-error; }

  if [[ $exit_status -ne 0 ]]; then
    user_command recover || touch unrecoverable-error
  fi

  if $do_html_report; then
    "$runner"/report --html-only . >/dev/null
  fi

  cd ..
  send_state_change active_results_directory null
  rm -f latest"$tag"; ln -s "$rundir" latest"$tag"
  popd >/dev/null
  return $exit_status
}

send_state_change() {
  if [ -z "$STBT_TRACING_SOCKET" ]; then
    return
  fi

  date='"'$(date --iso-8601=ns)'"'
  echo '{"state_change": {"changes": {"'"$1"'": '"$2"'}, "time": '"$date"'}}' \
    | socat STDIN "UNIX-CONNECT:$STBT_TRACING_SOCKET"
  true
}

template() {
  local template=$(
    sed -n 's,^.*stbt-run: Searching for \(.*\.png\)$,\1,p' stderr.log |
    tail -1)
  [ -f "$template" ] && cp "$template" template.png
}

backtrace() {
  local gdbcommand corefile=$1
  gdbcommand=$(mktemp -t report.XXX) || die "Failed to create temp file"
  echo "thread apply all bt" > $gdbcommand
  gdb $(which python) $corefile -batch -x $gdbcommand &> backtrace.log
  rm -f $gdbcommand
}

user_command() {
  local c=$("$runner"/../stbt-config batch.$1 2>/dev/null)
  [[ -z "$c" ]] && return
  "$c" $2 </dev/null
}

check_capture_hardware() {
  case "$("$runner"/../stbt-config global.source_pipeline | awk '{print $1}')" in
    v4l2src)
      if grep -q "Cannot identify device '/dev/v" failure-reason; then
        echo "v4l2 device not found; exiting."
        return 1
      fi
      ;;

    decklinksrc)
      ( echo "$(basename "$0"): Checking Blackmagic video-capture device"
        GST_DEBUG=decklinksrc:5 GST_DEBUG_NO_COLOR=1 \
        "$runner"/../stbt-run --sink-pipeline='fakesink sync=false' \
          <(echo "import time; time.sleep(1)") 2>&1
      ) | ts '[%Y-%m-%d %H:%M:%.S %z] ' > decklinksrc.log

      if grep -q "enable video input failed" decklinksrc.log; then
        local subdevice=$(
          "$runner"/../stbt-config global.source_pipeline |
          grep -o device-number=. | awk -F= '{print $2}')
        local users=$(
          lsof -F Lnc \
            /dev/blackmagic${subdevice:-0} \
            /dev/blackmagic/dv${subdevice:-0} \
            2>/dev/null |
          # Example `lsof` output:
          # p70752
          # cgst-launch-0.10
          # Lstb-tester
          # n/dev/blackmagic0
          awk '/^p/ { printf "\n" }
                    { sub(/^./, ""); printf $0 " " }')
        echo "Blackmagic card in use: $users" > failure-reason
        cp failure-reason failure-reason.manual
        echo "Blackmagic card in use; exiting."
        return 1

      # Even if the card has no video connected to its input you see
      # "VideoInputFrameArrived: Frame received - No input signal detected"
      elif ! grep -q VideoInputFrameArrived decklinksrc.log; then
        echo "Blackmagic card froze" > failure-reason
        cp failure-reason failure-reason.manual
        echo "Blackmagic card froze; exiting."
        return 1
      fi
      ;;
  esac
}

trap on_term sigterm
on_term() {
    # Ignore SIGTERM.  It will have been sent to the whole process group, but we
    # want this process to finish running to write out the right results files.
    true;
}

# Portable implementation of GNU "readlink -f" to support BSD/OSX.
realpath() {
  python -c 'import os, sys; print os.path.realpath(sys.argv[1])' "$1"
}

main "$@"
